diff -Nur audacity-src-1.3.2-beta-orig/configure audacity-src-1.3.2-beta/configure
--- audacity-src-1.3.2-beta-orig/configure	2006-10-29 01:05:36.000000000 +0200
+++ audacity-src-1.3.2-beta/configure	2007-02-24 03:12:59.000000000 +0100
@@ -5162,9 +5162,9 @@
 
 
 
-   { echo "$as_me:$LINENO: checking for FLAC__file_decoder_new in -lFLAC" >&5
-echo $ECHO_N "checking for FLAC__file_decoder_new in -lFLAC... $ECHO_C" >&6; }
-if test "${ac_cv_lib_FLAC_FLAC__file_decoder_new+set}" = set; then
+   { echo "$as_me:$LINENO: checking for FLAC__stream_decoder_init_file in -lFLAC" >&5
+echo $ECHO_N "checking for FLAC__stream_decoder_init_file in -lFLAC... $ECHO_C" >&6; }
+if test "${ac_cv_lib_FLAC_FLAC__stream_decoder_init_file+set}" = set; then
   echo $ECHO_N "(cached) $ECHO_C" >&6
 else
   ac_check_lib_save_LIBS=$LIBS
@@ -5182,11 +5182,11 @@
 #ifdef __cplusplus
 extern "C"
 #endif
-char FLAC__file_decoder_new ();
+char FLAC__stream_decoder_init_file ();
 int
 main ()
 {
-return FLAC__file_decoder_new ();
+return FLAC__stream_decoder_init_file ();
   ;
   return 0;
 }
@@ -5225,21 +5225,21 @@
   ac_status=$?
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
   (exit $ac_status); }; }; then
-  ac_cv_lib_FLAC_FLAC__file_decoder_new=yes
+  ac_cv_lib_FLAC_FLAC__stream_decoder_init_file=yes
 else
   echo "$as_me: failed program was:" >&5
 sed 's/^/| /' conftest.$ac_ext >&5
 
-	ac_cv_lib_FLAC_FLAC__file_decoder_new=no
+	ac_cv_lib_FLAC_FLAC__stream_decoder_init_file=no
 fi
 
 rm -f core conftest.err conftest.$ac_objext conftest_ipa8_conftest.oo \
       conftest$ac_exeext conftest.$ac_ext
 LIBS=$ac_check_lib_save_LIBS
 fi
-{ echo "$as_me:$LINENO: result: $ac_cv_lib_FLAC_FLAC__file_decoder_new" >&5
-echo "${ECHO_T}$ac_cv_lib_FLAC_FLAC__file_decoder_new" >&6; }
-if test $ac_cv_lib_FLAC_FLAC__file_decoder_new = yes; then
+{ echo "$as_me:$LINENO: result: $ac_cv_lib_FLAC_FLAC__stream_decoder_init_file" >&5
+echo "${ECHO_T}$ac_cv_lib_FLAC_FLAC__stream_decoder_init_file" >&6; }
+if test $ac_cv_lib_FLAC_FLAC__stream_decoder_init_file = yes; then
   lib_found="yes"
 else
   lib_found="no"
diff -Nur audacity-src-1.3.2-beta-orig/src/export/ExportFLAC.cpp audacity-src-1.3.2-beta/src/export/ExportFLAC.cpp
--- audacity-src-1.3.2-beta-orig/src/export/ExportFLAC.cpp	2006-10-29 01:05:27.000000000 +0200
+++ audacity-src-1.3.2-beta/src/export/ExportFLAC.cpp	2007-02-24 03:09:44.000000000 +0100
@@ -58,7 +58,6 @@
       gPrefs->Read(wxT("/FileFormats/FLACBitDepth"), wxT("16"));
    
    FLAC::Encoder::File *encoder= new FLAC::Encoder::File();
-   encoder->set_filename(OSFILENAME(fName));
    encoder->set_channels(numChannels);
    encoder->set_sample_rate(int(rate + 0.5));
 
@@ -72,7 +71,7 @@
     	format=int16Sample;
    	encoder->set_bits_per_sample(16);
    }
-   encoder->init();
+   encoder->init(OSFILENAME(fName));
    
    int numWaveTracks;
    WaveTrack **waveTracks;
diff -Nur audacity-src-1.3.2-beta-orig/src/import/ImportFLAC.cpp audacity-src-1.3.2-beta/src/import/ImportFLAC.cpp
--- audacity-src-1.3.2-beta-orig/src/import/ImportFLAC.cpp	2006-10-29 01:05:28.000000000 +0200
+++ audacity-src-1.3.2-beta/src/import/ImportFLAC.cpp	2007-02-24 03:04:04.000000000 +0100
@@ -264,19 +264,15 @@
 
 bool FLACImportFileHandle::Init()
 {
-   bool success = mFile->set_filename(OSFILENAME(mName));
-   if (!success) {
-      return false;
-   }
-   FLAC::Decoder::File::State state = mFile->init();
-   if (state != FLAC__FILE_DECODER_OK) {
+   FLAC__StreamDecoderInitStatus state = mFile->init(OSFILENAME(mName));
+   if (state != FLAC__STREAM_DECODER_INIT_STATUS_OK) {
       return false;
    }
    mFile->process_until_end_of_metadata();
-   state = mFile->get_state();
-   if (state != FLAC__FILE_DECODER_OK) {
-      return false;
-   }
+   //   FLAC__StreamDecoderState decstate = mFile->get_state();
+   //   if (state != FLAC__STREAM_DECODER_FILE_DECODER_OK) {
+       //      return false;
+   // }
    if (!mFile->is_valid() || mFile->get_was_error())
    {
       // This probably is not a FLAC file at all
@@ -340,7 +336,7 @@
       mChannels[1]->SetTeamed(true);
    }
 
-   mFile->process_until_end_of_file();
+   mFile->process_until_end_of_stream();
    
    *outTracks = new Track *[*outNumTracks];
    for(c = 0; c < *outNumTracks; c++) {
